/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
// #include "mouse.dtsi"

#define DEFAULT 0
#define NUM 1
#define SYM 2
#define SPECIAL 3
#define MOUSE 4

&sk {
    release-after-ms = <400>;
    quick-release;
};

&sl {
    release-after-ms = <100>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <NUM SYM>;
            then-layer = <SPECIAL>;
        };
    };

    behaviors {
        backdel: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DEL";
            #binding-cells = <0>;
            bindings =
                <&kp BACKSPACE>,
                <&kp DEL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        hktk: hold_key_tap_key {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_KEY_TAP_KEY";
            flavor = "tap-preferred";
            tapping-term-ms = <270>;
            quick-tap-ms = <200>;
            #binding-cells = <2>;
            bindings =
                <&kp>,
                <&kp>;
        };
        hltk: hold_layer_tap_key {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_LAYER_TAP_KEY";
            flavor = "tap-preferred";
            tapping-term-ms = <270>;
            quick-tap-ms = <200>;
            #binding-cells = <2>;
            bindings =
                <&mo>,
                <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&none          &none           &none  &none     &none  &none                               &none     &none      &none           &none             &none  &none
&none          &kp Q           &kp W  &kp E     &kp R  &kp T                               &kp Y     &kp U      &kp I           &kp O             &kp P  &none
&none  &hktk LCTRL A  &hktk LSHIFT S  &kp D     &kp F  &kp G                               &kp H     &kp J      &kp K  &hktk RSHIFT L  &hktk RCTRL SEMI  &none
&none          &kp Z           &kp X  &kp C     &kp V  &kp B      &none  &none             &kp N     &kp M  &kp COMMA         &kp DOT         &kp SLASH  &none
                                      &none  &kp LALT  &mo 1  &kp LSHFT  &mo 2  &hktk RGUI SPACE  &kp RALT      &none
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        number {
            bindings = <
&trans           &trans               &trans   &trans         &trans  &trans                    &trans         &trans       &trans     &trans     &trans  &trans
&trans           &kp N1               &kp N2   &kp N3         &kp N4  &kp N5                    &kp N6         &kp N7       &kp N8     &kp N9     &kp N0  &trans
&trans  &hktk LCTRL TAB  &hktk LSHFT LS(TAB)  &kp DEL  &kp BACKSPACE LS(F10)                  &kp LEFT       &kp DOWN       &kp UP  &kp RIGHT  &kp ENTER  &trans
&trans           &trans               &trans   &trans         &trans  &trans  &trans  &trans  &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP    &kp END     &trans  &trans
                                               &trans         &trans  &trans  &trans  &trans   &kp ESC         &trans       &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        symbol {
            bindings = <
&trans         &trans    &trans     &trans      &trans       &trans                     &trans         &trans    &trans    &trans     &trans  &trans
&trans       &kp EXCL    &kp AT   &kp HASH  &kp DOLLAR  &kp PERCENT                  &kp CARET  &kp AMPERSAND  &kp STAR  &kp LPAR   &kp RPAR  &trans
&trans      &kp GRAVE   &kp DQT  &kp MINUS   &kp UNDER     &kp LBKT                   &kp RBKT  &kp BACKSPACE  &kp PLUS   &kp SQT  &kp COLON  &trans
&trans  &kp BACKSLASH  &kp PIPE  &kp TILDE      &kp N0     &kp LBRC  &trans  &trans   &kp RBRC      &kp EQUAL    &kp LT    &kp GT  &kp QMARK  &trans
                                    &trans      &trans       &trans  &trans  &trans     &trans         &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        function {
            bindings = <
 &none         &none         &none         &none         &none       &none                    &none                   &none         &none         &none    &none  &none
 &none        &kp F1        &kp F2        &kp F3        &kp F4      &kp F5                   &kp F6                  &kp F7        &kp F8        &kp F9  &kp F10  &none
 &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR                  &kp F11  &kp C_BACKLIGHT_TOGGLE  &kp C_BRI_DN  &kp C_BRI_UP  &kp F12  &none
&trans         &none         &none         &none         &none       &none   &none   &none    &none              &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP    &none  &none
                                          &trans        &trans      &trans  &trans  &trans   &trans                  &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
/*
        mouse {
            bindings = <
 &none         &none         &none         &none         &none       &none                       &none         &none         &none          &none       &none  &none
 &none         &none         &none         &none         &none       &none                       &none         &none         &none          &none       &none  &none
 &none         &none         &none         &none         &none       &none                       U_MS_L        U_MS_D        U_MS_U        U_MS_R      U_BTN1  &none
 &none        &trans         &none         &none         &none       &none   &none   &none       U_WH_L        U_WH_D        U_WH_U        U_WH_R      U_BTN2  &none
                                          &trans        &trans      &trans  &trans  &trans       &trans        &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
*/
    };
};
